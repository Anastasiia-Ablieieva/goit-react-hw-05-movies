{"version":3,"file":"static/js/408.3cf86578.chunk.js","mappings":"uQAqFA,EAlFkB,SAAC,GAAe,IAAD,QAAZA,EAAY,EAAZA,MACXC,EACRD,EADQC,MAAOC,EACfF,EADeE,aAAcC,EAC7BH,EAD6BG,YAAaC,EAC1CJ,EAD0CI,aAAcC,EACxDL,EADwDK,SAAUC,EAClEN,EADkEM,OAE5DC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,IAAIC,KAAKR,GAEvBS,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAEVC,EAAYX,EAAW,0CACUA,GACnC,oEAEEY,EAAYX,EAAY,WACP,GAAfA,GAAmBY,QAAQ,GADL,KAE1B,gBAEJ,GAAKf,EAIL,OACE,iCACI,gBAAKgB,IAAKH,EAAWI,IAAG,UAAKjB,EAAL,cAExB,4BACE,qCAAMA,QAAN,IAAMA,EAAAA,EAAS,UAAf,KAA4BU,EAA5B,SACA,wCAAgBI,MAChB,4BACE,uCADF,IACsBV,KAGrBC,GAAUA,EAAOa,OAAS,IACzB,4BACE,mCACCb,EAAOc,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAK5C,4BACI,mDAEJ,2BACE,yBACE,SAAC,KAAD,CACEC,GAAG,OACHC,MAAO,CAAEC,KAAI,iBAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAUkB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAF1C,qBAQF,yBACE,SAAC,KAAD,CACEF,GAAG,UACHC,MAAO,CAAEC,KAAI,iBAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAUkB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAF1C,+BAYX,ECrCD,EA5BqB,WAAO,IAAD,IACfC,GAAYC,EAAAA,EAAAA,MAAZD,QACFpB,GAAWC,EAAAA,EAAAA,MACjB,GAA0CqB,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAkB,mCAAG,WAAMN,GAAN,iGAEKO,EAAAA,EAAAA,IAAeP,GAFpB,OAEbQ,EAFa,OAGnBJ,EAAiBI,GAHE,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,sDAQxBJ,EAAmBN,EACtB,GAAE,CAACA,KAGA,iCACI,SAAC,KAAD,CAAMH,GAAE,iBAAEjB,QAAF,IAAEA,GAAF,UAAEA,EAAUkB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,wBACA,SAAC,EAAD,CAAW1B,MAAO8B,KAClB,SAAC,EAAAQ,SAAD,WACI,SAAC,KAAD,QAIf,C","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ movie }) => {\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n  movie;\n  const location = useLocation(); \n  const releaseDate = new Date(release_date);\n\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  const posterUrl = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated yet';\n\n  if (!title) {\n    return;\n  }\n\n  return (\n    <>\n        <img src={posterUrl} alt={`${title} poster`} />\n\n        <div>\n          <h2> {title ?? 'Unknown'} ({releaseYear}) </h2>\n          <p>User Score: {userScore}</p>\n          <div>\n            <p> Overview: </p> {overview}\n          </div>\n\n          {genres && genres.length > 0 && (\n            <div>\n              <p>Genres:</p>\n              {genres.map(genre => genre.name).join(', ')}\n            </div>\n          )}\n        </div>\n\n        <div>\n            <p>Additional information</p>\n\n        <ul>\n          <li>\n            <NavLink\n              to=\"cast\"\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Cast\n            </NavLink>\n          </li>\n\n          <li>\n            <NavLink\n              to=\"reviews\"\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n\n        </div>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }).isRequired,\n};\n\nexport default MovieCard;","import { Suspense, useEffect, useState } from \"react\";\nimport { useParams, Outlet, Link, useLocation } from \"react-router-dom\";\nimport { fetchMovieById } from '../../services/api';\nimport MovieCard from \"components/MovieCard/MovieCard\";\n\nconst MovieDitails = () => {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [selectedMovie, setSelectedMovie] = useState({});\n\n    useEffect(() => {\n        const fetchSelectedMovie = async movieId => {\n            try {\n                const movieData = await fetchMovieById(movieId);\n                setSelectedMovie(movieData);\n            } catch (error) {\n                console.log(error)\n            }\n        };\n        fetchSelectedMovie(movieId);\n    }, [movieId])\n\n    return (\n        <>\n            <Link to={location?.state?.from ?? '/'}> Go back </Link>\n            <MovieCard movie={selectedMovie} />\n            <Suspense>\n                <Outlet />\n            </Suspense> \n        </>\n    )\n}\n\nexport default MovieDitails;"],"names":["movie","title","release_date","poster_path","vote_average","overview","genres","location","useLocation","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","userScore","toFixed","src","alt","length","map","genre","name","join","to","state","from","movieId","useParams","useState","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","fetchMovieById","movieData","console","log","Suspense"],"sourceRoot":""}