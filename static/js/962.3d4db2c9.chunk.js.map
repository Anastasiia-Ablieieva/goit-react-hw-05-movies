{"version":3,"file":"static/js/962.3d4db2c9.chunk.js","mappings":"8PACA,GAAgB,mBAAqB,sCAAsC,MAAQ,yBAAyB,gBAAkB,oC,SC2E9H,EAxEkB,SAAC,GAAe,IAAD,QAAZA,EAAY,EAAZA,MACXC,EACRD,EADQC,MAAOC,EACfF,EADeE,aAAcC,EAC7BH,EAD6BG,YAAaC,EAC1CJ,EAD0CI,aAAcC,EACxDL,EADwDK,SAAUC,EAClEN,EADkEM,OAE5DC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,IAAIC,KAAKR,GAEvBS,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAEVC,EAAYX,EAAW,0CACUA,GACnC,oEAEEY,EAAYX,EAAY,WACP,GAAfA,GAAmBY,QAAQ,GADL,KAE1B,gBAEJ,GAAKf,EAIL,OACE,iCACE,iBAAKgB,UAAWC,EAAAA,mBAAhB,WACE,gBAAKC,IAAKL,EAAWM,IAAG,UAAKnB,EAAL,cAExB,4BACE,qCAAMA,QAAN,IAAMA,EAAAA,EAAS,UAAf,KAA4BU,EAA5B,SACA,eAAIM,UAAWC,EAAAA,MAAf,4BACA,6BAAKH,MACL,eAAIE,UAAWC,EAAAA,MAAf,0BACA,uCAAeb,EAAf,QACA,eAAIgB,WAAYH,EAAAA,MAAhB,oBACCZ,GAAUA,EAAOgB,OAAS,IAC3B,yBAAIhB,EAAOiB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAAzC,cAKJ,iBAAKT,UAAWC,EAAAA,gBAAhB,WACE,oDACA,gBAAIS,SAAUT,EAAAA,oBAAd,WACE,yBACE,SAAC,KAAD,CAASU,GAAG,OAAOC,MAAO,CAAEC,KAAI,iBAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAUsB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAA3D,qBAIF,yBACE,SAAC,KAAD,CAASF,GAAG,UAAUC,MAAO,CAAEC,KAAI,iBAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAUsB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAA9D,+BAQX,EC5DD,EAA8B,kCCiC9B,EA5BqB,WAAO,IAAD,IACfC,GAAYC,EAAAA,EAAAA,MAAZD,QACFxB,GAAWC,EAAAA,EAAAA,MACjB,GAA0CyB,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAkB,mCAAG,WAAMN,GAAN,iGAEKO,EAAAA,EAAAA,IAAeP,GAFpB,OAEbQ,EAFa,OAGnBJ,EAAiBI,GAHE,gDAKnBC,QAAQC,IAAR,MALmB,yDAAH,sDAQxBJ,EAAmBN,EACtB,GAAE,CAACA,KAGA,iCACI,SAAC,KAAD,CAAMd,UAAWC,EAAiBU,GAAE,iBAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAUsB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAA/D,wBACA,SAAC,EAAD,CAAW9B,MAAOkC,KAClB,SAAC,EAAAQ,SAAD,WACI,SAAC,KAAD,QAIf,C","sources":["webpack://react-homework-template/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","webpack://react-homework-template/./src/pages/MovieDetails/MovieDitails.module.css?c82a","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieCardContainer\":\"MovieCard_movieCardContainer__octe8\",\"title\":\"MovieCard_title__mQEBM\",\"movieCardInform\":\"MovieCard_movieCardInform__aeFVs\"};","import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MovieCard.module.css'\n\nconst MovieCard = ({ movie }) => {\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n  movie;\n  const location = useLocation(); \n  const releaseDate = new Date(release_date);\n\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  const posterUrl = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated yet';\n\n  if (!title) {\n    return;\n  }\n\n  return (\n    <>\n      <div className={css.movieCardContainer}>\n        <img src={posterUrl} alt={`${title} poster`} />\n      \n        <div >\n          <h2> {title ?? 'Unknown'} ({releaseYear}) </h2>\n          <h3 className={css.title}> User Score: </h3>\n          <p> {userScore}</p>\n          <h3 className={css.title}> Overview: </h3> \n          <p> Overview: {overview} </p> \n          <h3 cclassName={css.title}>Genres</h3>\n          {genres && genres.length > 0 && (\n          <p>{genres.map(genre => genre.name).join(', ')} </p>\n          )}\n        </div>\n      </div>\n\n      <div className={css.movieCardInform}>\n        <h3>Additional information</h3>\n        <ul lassName={css.movieCardInformList}>\n          <li>\n            <NavLink to=\"cast\" state={{ from: location?.state?.from ?? '/' }}>\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\" state={{ from: location?.state?.from ?? '/' }}>\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }).isRequired,\n};\n\nexport default MovieCard;","// extracted by mini-css-extract-plugin\nexport default {\"movieDetBtn\":\"MovieDitails_movieDetBtn__jCH91\"};","import { Suspense, useEffect, useState } from \"react\";\nimport { useParams, Outlet, Link, useLocation } from \"react-router-dom\";\nimport { fetchMovieById } from '../../services/api';\nimport MovieCard from \"components/MovieCard/MovieCard\";\nimport css from './MovieDitails.module.css';\n\nconst MovieDitails = () => {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [selectedMovie, setSelectedMovie] = useState({});\n\n    useEffect(() => {\n        const fetchSelectedMovie = async movieId => {\n            try {\n                const movieData = await fetchMovieById(movieId);\n                setSelectedMovie(movieData);\n            } catch (error) {\n                console.log(error)\n            }\n        };\n        fetchSelectedMovie(movieId);\n    }, [movieId])\n\n    return (\n        <>\n            <Link className={css.movieDetBtn} to={location?.state?.from ?? '/'}> Go back </Link>\n            <MovieCard movie={selectedMovie} />\n            <Suspense>\n                <Outlet />\n            </Suspense> \n        </>\n    )\n}\n\nexport default MovieDitails;"],"names":["movie","title","release_date","poster_path","vote_average","overview","genres","location","useLocation","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","userScore","toFixed","className","css","src","alt","cclassName","length","map","genre","name","join","lassName","to","state","from","movieId","useParams","useState","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","fetchMovieById","movieData","console","log","Suspense"],"sourceRoot":""}